package lecture6OOP;

public class Main {
    // SOLID
    // S - Single responsibility principle
    // Принцип гласит, что может быть только одна причина, приводящая к изменению класса.
    // Другими словами, каждый класс должен иметь только одну отвественность,
    // которая должна быть инкапсулирована в этом классе.

    // O - Open-closed principle
    // Классы должны быть открыты для расширения и одновременно закрыты для модификации.
    // Иными словами, должна быть возможность добавлять новые свойства и расширять класс
    // без изменения внутренней реализации существующих свойст. "Закрыты для модификации" - "Открыты для расширения"

    // L - Liskov substitution principle
    // Принцип подставновки Барбары Лисков. Требует возможности использования любых порожденных
    // классов на месте родительских. При этом они должны обладать тем же поведением,
    // что и родительские классы, без внесения изменений. Этот принцип гарантирует,
    // что порожденный класс не изменяет определение типа родительского и его поведение.

    // I - Interface segregation principle
    // Клиенты не должны реализовывать интерфейсы, которые они не используют.
    // Данный принцип требует разделения "толстых" интерфейсов на несколько
    // специализированных, связанных общей функциональностью.

    // D - Dependency inversion principle
    // Принцип инверсии зависимостей:
    // - модули высокого уровня не должны зависеть от модулей нижнего уровня.
    // И те, и другие должны зависеть от абстракции.
    // - абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.

    public static void main(String[] args) {

    }
}
